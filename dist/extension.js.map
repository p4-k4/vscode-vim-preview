{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://vscode-vim-preview/webpack/runtime/require chunk loading","webpack://vscode-vim-preview/./src/extension.ts","webpack://vscode-vim-preview/external commonjs \"vscode\"","webpack://vscode-vim-preview/external node-commonjs \"fs\"","webpack://vscode-vim-preview/external node-commonjs \"os\"","webpack://vscode-vim-preview/external node-commonjs \"path\"","webpack://vscode-vim-preview/webpack/bootstrap","webpack://vscode-vim-preview/webpack/runtime/define property getters","webpack://vscode-vim-preview/webpack/runtime/ensure chunk","webpack://vscode-vim-preview/webpack/runtime/get javascript chunk filename","webpack://vscode-vim-preview/webpack/runtime/hasOwnProperty shorthand","webpack://vscode-vim-preview/webpack/runtime/make namespace object","webpack://vscode-vim-preview/webpack/startup"],"sourcesContent":["// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t792: 1\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as fs from 'fs';\n\n// Interfaces for vim keybindings\ninterface VimKeybinding {\n    before: string[];\n    commands: string[] | Command[];\n    after?: string[];\n    description?: string;\n}\n\ninterface Command {\n    command: string;\n    args?: any;\n}\n\n// Interface for VSCode keybindings\ninterface VSCodeKeybinding {\n    key: string;\n    command: string;\n    when?: string;\n    description?: string;\n}\n\ninterface KeybindingMatch extends vscode.QuickPickItem {\n    binding: VimKeybinding | VSCodeKeybinding;\n    bindingType: 'vim' | 'vscode';\n    searchText: string;\n}\n\nclass VimPreviewProvider {\n    private quickPick: vscode.QuickPick<KeybindingMatch>;\n    private disposables: vscode.Disposable[] = [];\n    private normalModeBindings: VimKeybinding[] = [];\n    private visualModeBindings: VimKeybinding[] = [];\n    private vscodeBindings: VSCodeKeybinding[] = [];\n    private leaderKey: string = '\\\\';\n    private readonly MAX_DESCRIPTION_LENGTH = 50;\n\n    constructor() {\n        this.quickPick = vscode.window.createQuickPick<KeybindingMatch>();\n        this.quickPick.placeholder = 'Type to filter keybindings (keys, commands, or descriptions)...';\n        this.quickPick.matchOnDescription = true;\n        this.quickPick.matchOnDetail = true;\n        this.disposables.push(this.quickPick);\n\n        // Update bindings when settings change\n        vscode.workspace.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('vim') || e.affectsConfiguration('keybindings')) {\n                this.updateBindings();\n            }\n        }, null, this.disposables);\n\n        this.updateBindings();\n    }\n\n    private updateBindings() {\n        const config = vscode.workspace.getConfiguration('vim');\n        this.leaderKey = config.get<string>('leader', '\\\\');\n        this.normalModeBindings = config.get<VimKeybinding[]>('normalModeKeyBindings', []);\n        this.visualModeBindings = config.get<VimKeybinding[]>('visualModeKeyBindings', []);\n\n        // Load VSCode keybindings\n        this.loadVSCodeKeybindings();\n    }\n\n    private getKeybindingsPath(): string {\n        const platform = os.platform();\n        const homeDir = os.homedir();\n        \n        switch (platform) {\n            case 'darwin': // macOS\n                return path.join(homeDir, 'Library', 'Application Support', 'Code', 'User', 'keybindings.json');\n            case 'win32': // Windows\n                return path.join(homeDir, 'AppData', 'Roaming', 'Code', 'User', 'keybindings.json');\n            default: // Linux and others\n                return path.join(homeDir, '.config', 'Code', 'User', 'keybindings.json');\n        }\n    }\n\n    private async loadVSCodeKeybindings() {\n        try {\n            const keybindingsPath = this.getKeybindingsPath();\n            if (!fs.existsSync(keybindingsPath)) {\n                return;\n            }\n\n            const content = fs.readFileSync(keybindingsPath, 'utf8');\n            // Dynamically import strip-json-comments\n            const stripJsonComments = (await import('strip-json-comments')).default;\n            // Remove comments from JSON before parsing\n            const jsonContent = stripJsonComments(content);\n            const keybindings: VSCodeKeybinding[] = JSON.parse(jsonContent);\n            this.vscodeBindings = keybindings.filter(binding => {\n                if (!binding || typeof binding !== 'object') {\n                    return false;\n                }\n                if (!('key' in binding) || !('command' in binding)) {\n                    return false;\n                }\n                if (binding.command.startsWith('-')) {\n                    return false;\n                }\n                return true;\n            });\n        } catch (error) {\n            console.error('Error loading VSCode keybindings:', error);\n            this.vscodeBindings = [];\n        }\n    }\n\n    private normalizeKey(key: string): string {\n        return key.toLowerCase().replace(/\\s+/g, '');\n    }\n\n    private getCommandsString(commands: (string | Command)[]): string {\n        return commands.map(cmd => \n            typeof cmd === 'string' ? cmd : cmd.command\n        ).join(', ');\n    }\n\n    private truncateDescription(description: string): string {\n        if (!description || description.length <= this.MAX_DESCRIPTION_LENGTH) {\n            return description || '';\n        }\n        return description.substring(0, this.MAX_DESCRIPTION_LENGTH - 3) + '...';\n    }\n\n    private isVimBinding(binding: VimKeybinding | VSCodeKeybinding): binding is VimKeybinding {\n        return 'before' in binding && Array.isArray(binding.before);\n    }\n\n    private getMatchingBindings(searchText: string): KeybindingMatch[] {\n        const matches: KeybindingMatch[] = [];\n        const normalizedSearch = this.normalizeKey(searchText);\n\n        // Add Vim bindings\n        const allVimBindings = [...this.normalModeBindings, ...this.visualModeBindings];\n        for (const binding of allVimBindings) {\n            if (!binding.before || !Array.isArray(binding.before)) {\n                continue;\n            }\n\n            const before = binding.before.map(key => {\n                if (key === '<leader>') {\n                    return this.leaderKey;\n                }\n                return key;\n            });\n            \n            const normalizedBinding = before.join('').toLowerCase();\n            const displayBinding = before.join('');\n            const commandsString = this.getCommandsString(binding.commands);\n\n            const searchableText = [\n                normalizedBinding,\n                commandsString.toLowerCase(),\n                binding.description?.toLowerCase() || ''\n            ].join(' ');\n\n            if (searchableText.includes(normalizedSearch)) {\n                const description = binding.description \n                    ? this.truncateDescription(binding.description)\n                    : '';\n\n                matches.push({ \n                    binding,\n                    bindingType: 'vim',\n                    label: `[Vim] ${displayBinding}`,\n                    description: description ? `${description} - ${commandsString}` : commandsString,\n                    searchText: searchableText,\n                    buttons: []\n                });\n            }\n        }\n\n        // Add VSCode bindings\n        for (const binding of this.vscodeBindings) {\n            if (!binding.key || !binding.command) {\n                continue;\n            }\n\n            const searchableText = [\n                binding.key.toLowerCase(),\n                binding.command.toLowerCase(),\n                binding.description?.toLowerCase() || '',\n                binding.when?.toLowerCase() || ''\n            ].join(' ');\n\n            if (searchableText.includes(normalizedSearch)) {\n                const description = binding.description \n                    ? this.truncateDescription(binding.description)\n                    : '';\n\n                matches.push({\n                    binding,\n                    bindingType: 'vscode',\n                    label: `[VSCode] ${binding.key}`,\n                    description: description \n                        ? `${description} - ${binding.command}${binding.when ? ` (when: ${binding.when})` : ''}`\n                        : `${binding.command}${binding.when ? ` (when: ${binding.when})` : ''}`,\n                    searchText: searchableText,\n                    buttons: []\n                });\n            }\n        }\n\n        return matches.sort((a, b) => {\n            // Sort by type first (Vim bindings before VSCode bindings)\n            if (a.bindingType !== b.bindingType) {\n                return a.bindingType === 'vim' ? -1 : 1;\n            }\n\n            // Then sort by key match\n            const aKeyMatch = this.isVimBinding(a.binding)\n                ? a.binding.before.join('').toLowerCase().includes(normalizedSearch)\n                : a.binding.key.toLowerCase().includes(normalizedSearch);\n            const bKeyMatch = this.isVimBinding(b.binding)\n                ? b.binding.before.join('').toLowerCase().includes(normalizedSearch)\n                : b.binding.key.toLowerCase().includes(normalizedSearch);\n            \n            if (aKeyMatch && !bKeyMatch) {\n                return -1;\n            }\n            if (!aKeyMatch && bKeyMatch) {\n                return 1;\n            }\n            \n            // Finally sort by description\n            const aDesc = a.binding.description || '';\n            const bDesc = b.binding.description || '';\n            return aDesc.localeCompare(bDesc);\n        });\n    }\n\n    public async showKeyBindings(initialSearch: string = '') {\n        this.quickPick.value = initialSearch;\n        this.quickPick.items = this.getMatchingBindings(initialSearch);\n        \n        this.quickPick.onDidChangeValue(value => {\n            this.quickPick.items = this.getMatchingBindings(value);\n        });\n\n        this.quickPick.onDidAccept(() => {\n            const selected = this.quickPick.selectedItems[0];\n            if (selected) {\n                if (this.isVimBinding(selected.binding)) {\n                    const commands = selected.binding.commands;\n                    if (Array.isArray(commands)) {\n                        commands.forEach(cmd => {\n                            if (typeof cmd === 'string') {\n                                vscode.commands.executeCommand(cmd);\n                            } else {\n                                vscode.commands.executeCommand(cmd.command, cmd.args);\n                            }\n                        });\n                    }\n                } else {\n                    vscode.commands.executeCommand(selected.binding.command);\n                }\n            }\n            this.quickPick.hide();\n        });\n\n        this.quickPick.show();\n    }\n\n    dispose() {\n        this.disposables.forEach(d => d.dispose());\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    const provider = new VimPreviewProvider();\n\n    const disposable = vscode.commands.registerCommand('vscode-vim-preview.showKeyBindings', () => {\n        provider.showKeyBindings();\n    });\n\n    context.subscriptions.push(disposable);\n    context.subscriptions.push(provider);\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".extension.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["installedChunks","context","provider","VimPreviewProvider","disposable","vscode","commands","registerCommand","showKeyBindings","subscriptions","push","quickPick","disposables","normalModeBindings","visualModeBindings","vscodeBindings","leaderKey","MAX_DESCRIPTION_LENGTH","constructor","this","window","createQuickPick","placeholder","matchOnDescription","matchOnDetail","workspace","onDidChangeConfiguration","e","affectsConfiguration","updateBindings","config","getConfiguration","get","loadVSCodeKeybindings","getKeybindingsPath","platform","os","homeDir","homedir","path","join","keybindingsPath","fs","existsSync","content","readFileSync","jsonContent","stripJsonComments","default","keybindings","JSON","parse","filter","binding","command","startsWith","error","console","normalizeKey","key","toLowerCase","replace","getCommandsString","map","cmd","truncateDescription","description","length","substring","isVimBinding","Array","isArray","before","getMatchingBindings","searchText","matches","normalizedSearch","allVimBindings","normalizedBinding","displayBinding","commandsString","searchableText","includes","bindingType","label","buttons","when","sort","a","b","aKeyMatch","bKeyMatch","aDesc","bDesc","localeCompare","initialSearch","value","items","onDidChangeValue","onDidAccept","selected","selectedItems","forEach","executeCommand","args","hide","show","dispose","d","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","m","definition","o","Object","defineProperty","enumerable","f","chunkId","Promise","all","keys","reduce","promises","u","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","chunk","moreModules","modules","chunkIds","ids","runtime","i","installChunk","__webpack_exports__"],"sourceRoot":""}